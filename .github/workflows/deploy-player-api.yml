name: ü´• deploy-player-api
on:
  workflow_call:
    inputs:
      aws-account-id:
        type: string
      aws-region:
        type: string
      certificate-arn-wildcard:
        type: string
      domain:
        type: string
      log-level:
        type: string
      stage-name:
        type: string
      vpc-id:
        type: string
jobs:
  deploy-player-api:
    runs-on: ubuntu-latest
    environment:
      # ETX Relaxnews account is all in one
      name: ci_etx-production
    container:
      image: node:18-alpine
    env:
      AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
      AWS_REGION: ${{ inputs.aws-region }}
      CERTIFICATE_ARN_WILDCARD: ${{ inputs.certificate-arn-wildcard }}
      DOMAIN: ${{ inputs.domain }}
      LOG_LEVEL: ${{ inputs.log-level }}
      STAGE_NAME: ${{ inputs.stage-name }}
      VPC_ID: ${{ inputs.vpc-id }}
      DISABLE_ERD: true
    steps:
    - name: Install alpine packages
      run: |
        apk add --no-cache tar git python3 aws-cli
        ln -sf python3 /usr/bin/python
        python3 -m venv .venv
        . .venv/bin/activate
        python3 -m ensurepip
    - name: Setup Git
      run: git config --global --add safe.directory /__w/product-voxa/product-voxa
    - name: ‚¨áÔ∏è Checkout
      id: checkout
      uses: actions/checkout@v4
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: '${{ vars.AWS_ACCESS_KEY_ID }}'
        aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        aws-region: 'eu-west-1'
    - name: Get secrets
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          DATABASE_URL, voxa-database-url-${{inputs.stage-name}}
    - name: ü•° Setup pnpm
      id: setup-pnpm
      uses: pnpm/action-setup@v3
      with:
        version: latest-8
        run_install: false
    - name: ü™¢ Setup node
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'pnpm'
    - name:  üöÄ Deploy to AWS
      run: |
        rm -f .env
        PRISMA_CLI_BINARY_TARGETS=linux-arm64-openssl-1.0.x pnpm install --ignore-scripts
        npx lerna run build --scope shared-types
        npx lerna run db:generate --scope core
        npx lerna run build --scope core
        pnpm exec lerna run build --scope @voxa/dns
        npx lerna run build --scope player-api
        pnpm player-api:deploy --stage $STAGE_NAME
